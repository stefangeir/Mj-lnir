//
//  facebookTVDatasource.swift
//  Mjölnir
//
//  Created by Stefán Geir on 21.2.2015.
//  Copyright (c) 2015 Stefán Geir Sigfússon. All rights reserved.
//

import UIKit

struct FbPost {
    var PictureUrl: String?
    var Description: String? // A description of a link in the post (appears beneath the caption).
    var Caption: String? // The caption of a link in the post (appears beneath the name).
    var Story: String? // Text from stories not intentionally generated by users, such as those generated when two people become friends, or when someone else posts on the person's wall.
    var Message: String? // The status message in the post.
    var CreatedTime: String? // The time the post was initially published.
    var ID: String? // The post ID
    var LinkName: String? // The name of the link.
}

class FacebookTVDatasource: NSObject, UITableViewDataSource
{
    
    struct FBGraphStrings {
        static let PictureURL = "picture" // The picture scraped from any link included with the post.
        static let Description = "description"
        static let Caption = "caption"
        static let Story = "story"
        static let Message = "message"
        static let CreatedTime = "created_time"
        static let Id = "id"
        static let LinkName = "name" // The name of the link (if included in post)
    }
    
    
    weak var controller: FacebookTVC!
    var datamodel = FacebookDataModel()
    var fbPosts = [FbPost]()
    var indexOfNextPostToParse: Int = 0
    
    func refresh() {
        reset()
        datamodel.performRequest()
    }
    
    func reset() {
        datamodel.reset()
        fbPosts.removeAll(keepCapacity: true)
        indexOfNextPostToParse = 0
    }
    
    private struct Storyboard {
        static let PostCellIdentifier = "reusable.facebookCell"
        static let LoadingCellIdentifier = "reusable.facebookLoadingCell"
    }
    
    func tableView(tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        if controller.userIsLoggedIn {
            return fbPosts.count + 1 // + 1 fyrir loading cellið
        } else {
            return 0
        }
    }
    
    func tableView(tableView: UITableView, cellForRowAtIndexPath indexPath: NSIndexPath) -> UITableViewCell {
        
        if indexPath.row < fbPosts.count {
            let cell = tableView.dequeueReusableCellWithIdentifier(Storyboard.PostCellIdentifier, forIndexPath: indexPath) as FacebookPostTVCell
            cell.post = fbPosts[indexPath.row]
            
            return cell
            
        } else {
            
            let cell = tableView.dequeueReusableCellWithIdentifier(Storyboard.LoadingCellIdentifier) as FacebookLoadingTVCell
            
            cell.separatorInset = UIEdgeInsetsMake(0, cell.bounds.size.width, 0, 0)
            cell.backgroundColor = UIColor.blackColor()
            return cell
        }
    }
    
    func getItemLinkInRow(row: Int) -> String {
        
        if row < fbPosts.count {
            let postIDString = fbPosts[row].ID!
            let stringArray = postIDString.componentsSeparatedByString("_")
            if stringArray.count == 2 {
                return "http://www.facebook.com/\(stringArray[0])/posts/\(stringArray[1])"
            }
            return "http://www.facebook.com/\(postIDString)"
        }
        return "http://www.facebook.com/"
        
    }
    
    func getItemTitleInRow(row: Int) -> String {
        return fbPosts[row].Message!
    }
    
    func getIdInRow(row: Int) -> String {
        return fbPosts[row].ID!
    }
    
    
    
    func parseData() {
        var i = Int()
        
        for i = indexOfNextPostToParse; i < datamodel.jsonDataArray.count; i++ {
            let post = datamodel.jsonDataArray[i]
            
            let thisPost = FbPost(PictureUrl: post[FBGraphStrings.PictureURL].string, Description: post[FBGraphStrings.Description].string, Caption: post[FBGraphStrings.Caption].string, Story: post[FBGraphStrings.Story].string, Message: post[FBGraphStrings.Message].string, CreatedTime: post[FBGraphStrings.CreatedTime].string, ID: post[FBGraphStrings.Id].string, LinkName: post[FBGraphStrings.LinkName].string)
                    
            fbPosts.append(thisPost)
        }
        
        indexOfNextPostToParse = i
        controller.refreshControl?.endRefreshing()
        controller.tableView.reloadData()
    }
    
    func handleFBError(note: NSNotification) {
        
        controller.refreshControl?.endRefreshing()
        if let errorDict = note.userInfo as? [String:NSError] {
            if let error = errorDict["Error"] {
                controller.showMessage(error.localizedDescription, withTitle: "Vesen")
            }
            
            
//            let category = FBErrorUtility.errorCategoryForError(error)
//            if category == FBErrorCategory.Permissions {
//                controller.userIsLoggedIn = false
//            } else if category == .Retry || category == .Throttling {
//                if datamodel.retryCount < 3 {
//                    datamodel.retryCount++
//                    datamodel.performRequest()
//                } else {
//                    controller.showMessage("Gat ekki sótt gögn", withTitle: "Error")
//                }
//                
//            } else if category == .AuthenticationReopenSession {
//                controller.userIsLoggedIn = false
//                controller.showMessage("Skráðu þig aftur inn", withTitle: "Logged out")
//            } else {
//                controller.showMessage("Reyndu aftur", withTitle: "Eitthvað vesen")
//            }
        }
    }
    
    
}
